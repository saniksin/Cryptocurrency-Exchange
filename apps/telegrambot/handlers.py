from aiogram import types
from django.conf import settings
from apps.telegrambot.config import bot, admin
from django.contrib.sites.models import Site
from apps.exchange.models import Transaction
from apps.telegrambot.models import TelegramUser
from asgiref.sync import sync_to_async
from django.core.mail import send_mail
from django.core.exceptions import ObjectDoesNotExist
import re


# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ 
async def get_or_create_user(message: types.Message) -> TelegramUser:
    username = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user = await sync_to_async(TelegramUser.objects.get)(user_id=str(message.from_user.id))

        # –ï—Å–ª–∏ username –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å, –º—ã –µ–≥–æ –æ–±–Ω–æ–≤–ª—è–µ–º
        if username != user.username:
            user.username = username
            await sync_to_async(user.save)()
    except ObjectDoesNotExist:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        user = await sync_to_async(TelegramUser.objects.create)(username=username, user_id=str(message.from_user.id))
        
    return username, user


# –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É start
async def send_welcome(message: types.Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —è –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!ü¶Ñ\n"
                        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –∫–∞–∫–æ–π-–ª–∏–±–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π —Å—Ä–∞–∑—É —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –µ–µ –Ω–æ–º–µ—Ä!")


# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–º–µ–Ω–µ
async def get_domain_info():

    protocol = 'http' if settings.DEBUG else 'https'
    site = await sync_to_async(Site.objects.get_current)()
    domain = site.domain

    return protocol, domain


# –ü–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏–µ –Ω–∞ –ø–æ—á—Ç—É
def send_email_notification(email, transaction_number):
    subject = "–í–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    message = f"–î–æ—Ä–æ–≥–æ–π –∫–ª–∏–µ–Ω—Ç, –≤–∞—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {transaction_number} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º.\n" \
               "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞ —Å–≤–æ–π —Å—á–µ—Ç!\n" \
               "–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ —Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n" \
               "–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!"
    email_from = settings.EMAIL_HOST_USER
    recipient_list = [email,]
    send_mail(subject, message, email_from, recipient_list)


# –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–± —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def notify_admin(transaction, bot=bot):

    protocol, domain = await get_domain_info()

    message_to_send = (
    f"<b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> "
    f"<a href='{protocol}://{domain}/admin/exchange/transaction/{transaction.id}/change/'>{transaction.unique_transaction_number}</a>\n"
    f"<i>(–û–ø–ª–∞—á–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)</i>\n\n"

    f"<b>Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {transaction.email}\n\n"

    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–∞–µ—Ç:</b>\n"
    f"{transaction.selling_amount} {transaction.selling_currency}\n\n"

    f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ –∞–¥—Ä–µ—Å/–∫–∞—Ä—Ç—É:</b>\n"
    f"{transaction.reception_address}\n\n"

    f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç:</b>\n"
    f"{transaction.buying_amount} {transaction.buying_currency}\n\n"

    f"<b>–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å—Ç—É–ø–∏–ª, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –∫–∞—Ä—Ç—É/–∞–¥—Ä–µ—Å:</b>\n"
    f"{transaction.user_reception_address}\n\n"

    f"<b>–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b>\n"
    f"{transaction.recipient_name}\n\n"

    f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é.\n</i>"
    f"<i>–û—Ç–º–µ–Ω–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ª–∏–±–æ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –µ–µ –≤ —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</i>")

    inline_keyboard = types.InlineKeyboardMarkup(row_width=2)
    inline_keyboard.add(
        types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f'cancel_{transaction.id}'),
        types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f'finish_{transaction.id}'),
    )
    
    await bot.send_message(admin, message_to_send, parse_mode='HTML', reply_markup=inline_keyboard)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async def process_transaction_status(callback_query: types.CallbackQuery, new_status: str, reply_text: str):
    transaction_id = int(callback_query.data.split('_')[1])
    
    transaction = await sync_to_async(Transaction.objects.get)(pk=transaction_id)
    transaction.status = new_status
    await sync_to_async(transaction.save)()

    protocol, domain = await get_domain_info()
    transaction_url = f"{protocol}://{domain}/admin/exchange/transaction/{transaction.id}/change/"

    message = f"{reply_text} <a href='{transaction_url}'>{transaction.unique_transaction_number}</a>"

    await bot.send_message(callback_query.from_user.id, message, parse_mode='HTML')

    if new_status == 'Finish':
        await sync_to_async(send_email_notification)(transaction.email, transaction.unique_transaction_number)

    await bot.answer_callback_query(callback_query.id)


# –û—Ç–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
async def process_callback_cancel(callback_query: types.CallbackQuery):
    await process_transaction_status(callback_query, 'Cancel', "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞:")


# –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é 
async def process_callback_finish(callback_query: types.CallbackQuery):
    await process_transaction_status(callback_query, 'Finish', "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
async def toggle_user_block_status(message: types.Message, block: bool):
    user_id = message.get_args()

    queryset = await sync_to_async(TelegramUser.objects.filter)(user_id=user_id)
    user = await sync_to_async(queryset.first)()

    if user:
        user.is_blocked = block
        await sync_to_async(user.save)()

        action = "–±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if block else "–±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} {action}.")
    else:
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.")


# –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞–ª—è
async def block_user(message: types.Message):
    await toggle_user_block_status(message, True)


# –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞–ª—è
async def unblock_user(message: types.Message):
    await toggle_user_block_status(message, False)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def forward_to_admin(message: types.Message):

    username, user = await get_or_create_user(message)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await bot.send_message(
        admin,
        f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ.\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username} (ID: {user.user_id})\n\n–¢–µ–∫—Å—Ç: {message.text}"
    )


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def reply_to_user(message: types.Message):
    if message.reply_to_message is not None:
        original_message = message.reply_to_message

        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id = re.search(r"(ID: )(\d+)", original_message.text).group(2)

        await bot.send_message(chat_id=user_id, text=message.text)
